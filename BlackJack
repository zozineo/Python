""" Projeto 2: Criar um BlackJack """

import random
import time

dinheiro=250
verif=0
l=0
mão_do_dealer=[]
mão_do_jogador=[]
instruções='\n Essas são as jogadas possíveis: \n (1): Hit (pegue uma carta do baralho) \n (2): Stand (se estiver satisfeito com a sua mão, passe a jogada para o Dealer) \n (3): Double Down (compre exatamente mais uma carta, dobre sua aposta e passe a vez para o Dealer) \n (4): Forfeit (desista da aposta)'


# funções de inicialização:

class Config_iniciais(object):

    def __init__ (self):
        global nome_do_jogador
        try:
            nome_do_jogador = input('\n Bem-vindo ao Blackjack!!\n \n Como você se chama? \n')
            if type(nome_do_jogador) != str:
               raise ValueError
        except:
            print('\n Algo deu errado! Tenha certeza que colocou um nome válido!!')
            Config_iniciais.__init__(self)
        else:
            pass

    def apostar(self):
        global dinheiro, aposta, nome_do_jogador
        print('\n', nome_do_jogador, ', \n Você tem R$%s disponível'% (dinheiro))
        try:
            aposta = int(input('\n Qual será sua aposta inicial? \n \n R$:'))
            if aposta > dinheiro:
                print('\n Você não tem tanto dinheiro assim... \n Você tem R$%s disponível'% (dinheiro))
                raise ValueError
            if aposta <= 0:
                print('\n Safadinhe, não da pra apostar um número negativo \n Você tem R$%s disponível'% (dinheiro))
                raise ValueError
        except:
            print('\n Coloque um valor válido!! Digite apenas números (positivos)! \n')
            ci.apostar() 
        else:
            dinheiro-=aposta
            print('\n Tudo certo! Bem-vindo ao BlackJack, %s'%(nome_do_jogador))
    
def carta(número,naipe):
    global naipes, números, família
    números=['Ás', '2', '3', '4', '5', '6', '7',
             '8', '9', '10', 'Valete', 'Dama', 'Rei']
    naipes=['♦', '♠', '♥', '♣']
    família=['Valete', 'Dama', 'Rei']
    return '%s %s' %(números[número],naipes[naipe])   

class Baralho(object):
    
    def __init__(self):
        global baralho
        baralho=[]
        for num in range(13):
            for naipe in range(4):
                c=carta(num,naipe)
                baralho.append(c)

class Dealer(object):
    
    def __init__(self):
        pass

    def entregar(self):
        global mão_do_dealer, mão_do_jogador, baralho, dinheiro, aposta
        print('\n (O Dealer está entregando as cartas...) \n')
        time.sleep(1.5)
        rd=(random.choices(range(len(baralho)),k=2))
        rd.sort(reverse=True)
        for num in rd:
            cd=baralho.pop(num)
            mão_do_dealer.append(cd)
        rj=(random.choices(range(len(baralho)),k=2))
        rj.sort(reverse=True)
        for num in rj:
            cs=baralho.pop(num)
            mão_do_jogador.append(cs)
        print('\n (Mão do Dealer):', mão_do_dealer[0], '\n (Sua mão:)', mão_do_jogador, '\n')
        

# funções de jogadas possíveis:

class Jogadas(object):
    
    def __init__(self):
        pass
    
    def jogador(self):
        global mão_do_jogador, vm_jogador, baralho, verif
        p.vmf_jogador()
        c.cond1_j()
        if verif==1:
            pass
        else:
            print(instruções)
            try:
                co=int(input('\n (Indique o que quer fazer com sua mão:) \n'))
                if 0 > co > 4:
                    raise ValueError
            except:
                print('(Coloque um comando válido! Digite apenas o número da jogada e dê "Enter")')
                j.jogador()
            else:
                if co == 1:
                    j.hit()
                    c.cond1_j()
                    if verif == 1:
                        pass
                    else:
                        j.jogador()
                elif co == 2:
                    j.stand()
                    pass
                elif co == 3:
                    j.double_down()
                    c.cond1_j()
                elif co == 4:
                    try:
                        res=str(input('\n (Você tem certeza que quer desistir dessa mão?) \n \n (Responda apenas com "s" ou "n")'))
                        if res!='s' and res!='n':
                            raise ValueError
                    except:
                        print('\n (ATENÇÃO!! Responda apenas com "s" ou "n") \n')
                        j.jogador()
                    else:
                        if res == 's':
                            j.forfeit()
                            pass
                        if res =='n':
                            j.jogador()
        
    def dealer(self):
        global mão_do_dealer, baralho, vm_dealer, verif, dinheiro, aposta
        print('\n \n (O Dealer virou a carta de furo: %s): \n'%(mão_do_dealer[1]), mão_do_dealer)
        time.sleep(1.5)
        p.vmf_dealer()
        while len(mão_do_dealer) <= 4 or vm_dealer < 17:
            p.vmf_dealer()
            c.cond1_d()
            if verif==1:
                break
            rdc=random.choices((range(len(baralho)+1)),k=1)
            for num in rdc:
                ccd=baralho.pop(num)
                mão_do_dealer.append(ccd)
                print('\n \n (Mão do Dealer):', mão_do_dealer)
                print('\n (O Dealer comprou um(a) %s) \n' %(ccd))
                time.sleep(2)
        else:
            p.vmf_dealer()
            c.cond1_d()
            pass

    def credito_e_aposta(self):
        global dinheiro, aposta
        print(
            '---------------------------------------------------- \n',
            '|                                                  | \n',
            '|           (Seu dinheiro total: R$ %s)            | \n'%(dinheiro),
            '|                                                  | \n',
            '|                                                  | \n',
            '|            (A aposta na mesa: R$ %s)             | \n'%(aposta),
            '|                                                  | \n',
            '---------------------------------------------------- \n')
        
    def hit(self):
        global mão_do_jogador, baralho
        print('\n (O Dealer está entregando uma nova carta...) \n')
        time.sleep(1)
        for num in random.choices((range(len(baralho))),k=1):
            cc=baralho.pop(num)
            mão_do_jogador.append(cc)
            print('\n (Você comprou um(a) %s) \n' %(cc))
        print('\n (Sua mão:) \n', mão_do_jogador, '\n')
        p.vmf_jogador()
        j.credito_e_aposta()
        
    def stand(self):
        p.vmf_jogador()
        j.credito_e_aposta()
        pass
        
    def double_down(self):
        global aposta, dinheiro
        if aposta*2 <= dinheiro:
            dinheiro-=aposta
            aposta*=2
            j.hit()
        else:
            print('\n (Você não tem dinheiro suficiente. Escolha outra jogada...) \n')
            time.sleep(0.5)
            j.jogador()

    def forfeit(self):
        global dinheiro, aposta, verif
        dinheiro+=aposta/2
        aposta = 0
        verif=1
        print ('\n (Você desistiu dessa rodada, mas recuperou metade da sua aposta.) \n')


# contadores de pontuação:

class Pontuadores(object):

    def __init__ (self):
        pass

    def vmf_jogador(self):
        global mão_do_jogador, vm_jogador, família, números
        vm_jogador=0
        if len(mão_do_jogador) == 2:
            c1=mão_do_jogador[0]
            c2=mão_do_jogador[1]
            c1_split=c1.split(' ')
            c2_split=c2.split(' ')
            if (c1_split[0] in família) and (c2_split[0] == 'Ás') or (c1_split[0] in família) and (c2_split[0] == 'Ás'):
                vm_jogador=21
            else:
                for c in mão_do_jogador:
                    c_split=c.split(' ')
                    if c_split[0] in família:
                        vm_jogador+=10
                    elif c_split[0] in números:
                        vm_jogador+=(números.index(c_split[0]))+1
        else:
            for c in mão_do_jogador:
                c_split=c.split(' ')
                if c_split[0] in família:
                    vm_jogador+=10
                elif c_split[0] in números:
                    vm_jogador+=(números.index(c_split[0]))+1
        
    def vmf_dealer(self):
        global mão_do_dealer, vm_dealer, família, números
        vm_dealer=0
        if len(mão_do_dealer) == 2:
            c1=mão_do_dealer[0]
            c2=mão_do_dealer[1]
            c1_split=c1.split(' ')
            c2_split=c2.split(' ')
            if (c1_split[0] in família) and (c2_split[0] == 'Ás') or (c1_split[0] in família) and (c2_split[0] == 'Ás'):
                vm_dealer=21
            else:
                for c in mão_do_dealer:
                    c_split=c.split(' ')
                    if c_split[0] in família:
                        vm_dealer+=10
                    elif c_split[0] in números:
                        vm_dealer+=(números.index(c_split[0]))+1
        else:
            for c in mão_do_dealer:
                c_split=c.split(' ')
                if c_split[0] in família:
                    vm_dealer+=10
                elif c_split[0] in números:
                    vm_dealer+=(números.index(c_split[0]))+1
            

# condições de vitória e derrota:

class Condições(object):
    
    def __init__(self):
        pass

    def cond1_j(self):
        global vm_jogador, aposta, verif, mão_do_jogador, dinheiro
        p.vmf_jogador()
        if vm_jogador == 21 and len(mão_do_jogador) == 2:
            print('\n \n %s'%(mão_do_jogador), '\n \n BlackJack!! Você alcançou 21 e venceu a mão!! \n \n')
            dinheiro+=2*aposta
            aposta=0
            verif=1
        elif vm_jogador > 21:
            print('\n Você perdeu! Sua mão não pode passar de 21 pontos.')
            aposta=0
            verif=1

    def cond1_d(self):
        global vm_dealer, mão_do_dealer, verif, aposta, dinheiro
        p.vmf_dealer()
        if vm_dealer == 21 and len(mão_do_dealer) == 2:
            print('\n BlackJack do Dealer :(( O Dealer alcançou 21 e venceu a mão... \n \n')
            aposta=0
            verif=1
        elif vm_dealer > 21:
            print('\n Você venceu! A mão do dealer passou de 21 pontos.')
            dinheiro+=2*aposta
            aposta=0
            verif=1
        elif vm_jogador < vm_dealer:
            print('\n Você perdeu! A mão do dealer alcançou um valor maior sem estourar. \n')
            aposta=0
            verif=1
        

    def cond2(self):
        global vm_dealer, vm_jogador, aposta, dinheiro, verif
        if verif==1:
            pass
        else:
            if vm_jogador == vm_dealer:
                print('\n \n Empatou!!! Ambas as mãos alcançaram o mesmo valor!! \n \n Você recebe o valor apostado de 1:1 \n')
                dinheiro+=aposta
                aposta=0
                verif=1
            elif vm_jogador > vm_dealer:
                print('\n Você venceu! Conseguiu derrotar a mão do dealer. \n')
                dinheiro+=2*aposta
                aposta=0
                verif=1
    

# comando para iniciar e continuar o jogo:

def jogar():
    global verif
    verif=0
    ci.apostar()
    d.entregar()
    while verif==0:
        j.jogador()
        if verif==1:
            break
        j.dealer()
        if verif==1:
            break
        c.cond2()

def continuar():
    global l, mão_do_jogador, mão_do_dealer, dinheiro, baralho, b, cont
    l=0
    try:
        cont=str(input('\n (Você quer jogar mais uma mão? Responda com "s" ou "n") \n \n'))
        if cont !='s' and cont !='n':
            raise ValueError
        else:
            if dinheiro <= 0:
                print('\n \n GAME OVER!!! Você não tem mais dinheiro para apostar muahahaha perdeu tudo \n')
                l=1
            else:
                del b
                if cont =='s':
                    mão_do_dealer=[]
                    mão_do_jogador=[]
                    b=Baralho()
                if cont == 'n':
                    print('\n Esse foi o seu saldo dessa mesa, %s: R$ %s' %(nome_do_jogador) %(dinheiro-250))
                    print('\n Muito obrigado por ter jogado o BlackJack!! Volte sempre \n')
                    l=1
    except:
        print('\n (Por favor, coloque uma resposta válida!!! "s" ou "n")')
        continuar()

# o jogo em si!!:

ci=Config_iniciais()
b=Baralho()
d=Dealer()
j=Jogadas()
p=Pontuadores()
c=Condições()
while l!=1:
        jogar()
        continuar()
